{"ast":null,"code":"// import Web3 from 'web3';\n// let web3;\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\n//     web3 = new Web3(window.web3.currentProvider);\n// }\n// else{\n//    const provider=new Web3.providers.HttpProvider(\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\n// );\n//     web3 = new Web3(provider);\n//     console.log(\"Injected web3 not detected. Using http provider.\");\n// }\n// export default web3;\nimport Web3 from \"web3\";\nlet web3;\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Acccounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n          web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(web3);\n        }\n\n    web3 = await getWeb3();\n  });\n});\n\nexport default web3;","map":{"version":3,"sources":["C:/Users/ragha/Downloads/blockchain/Campaign/ethereum/web3.js"],"names":["Web3","web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","enable","error","console","log","provider","providers","HttpProvider"],"mappings":"AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAKA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,IAAIC,IAAJ;;AACA,MAAMC,OAAO,GAAI,MACf,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AAClBP,MAAAA,IAAI,GAAG,IAAID,IAAJ,CAASM,MAAM,CAACE,QAAhB,CAAP;;AACD,UAAI;AACF;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN,CAFE,CAGF;;AACAL,QAAAA,OAAO,CAACH,IAAD,CAAP;AACD,OALD,CAKE,OAAOS,KAAP,EAAc;AACdL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACD;AACF,KAVD,CAWA;AAXA,SAYK,IAAIJ,MAAM,CAACL,IAAX,EAAiB;AACpB;AACCA,QAAAA,IAAI,GAAGK,MAAM,CAACL,IAAd;AACDU,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,QAAAA,OAAO,CAACH,IAAD,CAAP;AACD,OALI,CAML;AANK,WAOA;AACH,gBAAMY,QAAQ,GAAG,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGCd,UAAAA,IAAI,GAAG,IAAID,IAAJ,CAASa,QAAT,CAAP;AACDF,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAR,UAAAA,OAAO,CAACH,IAAD,CAAP;AACD;;AACDA,IAAAA,IAAI,GAAC,MAAMC,OAAO,EAAlB;AAED,GA/BD;AAiCD,CAnCD,CADF;;AAsCA,eAAeD,IAAf","sourcesContent":["// import Web3 from 'web3';\r\n\r\n// let web3;\r\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\r\n\r\n//     web3 = new Web3(window.web3.currentProvider);\r\n    \r\n// }\r\n// else{\r\n//    const provider=new Web3.providers.HttpProvider(\r\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n// );\r\n   \r\n//     web3 = new Web3(provider);\r\n  \r\n//     console.log(\"Injected web3 not detected. Using http provider.\");\r\n   \r\n// }\r\n\r\n\r\n\r\n\r\n// export default web3;\r\nimport Web3 from \"web3\";\r\nlet web3;\r\nconst getWeb3 =  () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n         web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n         web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n         web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n      web3=await getWeb3();\r\n\r\n    });\r\n    \r\n  });\r\n\r\nexport default web3;"]},"metadata":{},"sourceType":"module"}
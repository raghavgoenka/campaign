{"ast":null,"code":"import Web3 from 'web3';\nlet web3; // if(typeof window !== 'undefined' && typeof window.web3 !=='undefined'){\n//     web3 = new Web3(window.web3.currentProvider);\n//     console.log(\"Web3 is defined\");\n// }\n// else{\n\nconst provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545' // 'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\n);\nweb3 = new Web3(provider);\nconst accounts = web3.eth.getAccounts();\nconsole.log(accounts);\nconsole.log(\"Injected web3 not detected. Using http provider.\"); // }\n// console.log(web3);\n\nexport default web3; // import Web3 from \"web3\";\n// const getWeb3 = () =>\n//   new Promise((resolve, reject) => {\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\n//     window.addEventListener(\"load\", async () => {\n//       // Modern dapp browsers...\n//       if (window.ethereum) {\n//         const web3 = new Web3(window.ethereum);\n//         try {\n//           // Request account access if needed\n//           await window.ethereum.enable();\n//           // Acccounts now exposed\n//           resolve(web3);\n//         } catch (error) {\n//           reject(error);\n//         }\n//       }\n//       // Legacy dapp browsers...\n//       else if (window.web3) {\n//         // Use Mist/MetaMask's provider.\n//         const web3 = window.web3;\n//         console.log(\"Injected web3 detected.\");\n//         resolve(web3);\n//       }\n//       // Fallback to localhost; use dev console port by default...\n//       else {\n//         const provider = new Web3.providers.HttpProvider(\n//           \"http://127.0.0.1:7545\"\n//         );\n//         const web3 = new Web3(provider);\n//         console.log(\"No web3 instance injected, using Local web3.\");\n//         resolve(web3);\n//       }\n//     });\n//   });\n// export default new Web3(getWeb3);","map":{"version":3,"sources":["C:/Users/ragha/Downloads/blockchain/Campaign/ethereum/web3.js"],"names":["Web3","web3","provider","providers","HttpProvider","accounts","eth","getAccounts","console","log"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,IAAJ,C,CAEA;AAEA;AACA;AAEA;AACA;;AACG,MAAMC,QAAQ,GAAC,IAAIF,IAAI,CAACG,SAAL,CAAeC,YAAnB,CACZ,uBADY,CAEd;AAFc,CAAf;AAMCH,IAAI,GAAG,IAAID,IAAJ,CAASE,QAAT,CAAP;AACA,MAAMG,QAAQ,GAACJ,IAAI,CAACK,GAAL,CAASC,WAAT,EAAf;AACAC,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEAG,OAAO,CAACC,GAAR,CAAY,kDAAZ,E,CAEJ;AACA;;AACA,eAAeR,IAAf,C,CAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import Web3 from 'web3';\r\n\r\nlet web3;\r\n\r\n// if(typeof window !== 'undefined' && typeof window.web3 !=='undefined'){\r\n        \r\n//     web3 = new Web3(window.web3.currentProvider);\r\n//     console.log(\"Web3 is defined\");\r\n   \r\n// }\r\n// else{\r\n   const provider=new Web3.providers.HttpProvider(\r\n      'http://127.0.0.1:8545'\r\n    // 'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n);\r\n\r\n   \r\n    web3 = new Web3(provider);\r\n    const accounts=web3.eth.getAccounts();\r\n    console.log(accounts);\r\n  \r\n    console.log(\"Injected web3 not detected. Using http provider.\");\r\n   \r\n// }\r\n// console.log(web3);\r\nexport default web3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import Web3 from \"web3\";\r\n\r\n// const getWeb3 = () =>\r\n//   new Promise((resolve, reject) => {\r\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n//     window.addEventListener(\"load\", async () => {\r\n//       // Modern dapp browsers...\r\n//       if (window.ethereum) {\r\n//         const web3 = new Web3(window.ethereum);\r\n//         try {\r\n//           // Request account access if needed\r\n//           await window.ethereum.enable();\r\n//           // Acccounts now exposed\r\n//           resolve(web3);\r\n//         } catch (error) {\r\n//           reject(error);\r\n//         }\r\n//       }\r\n//       // Legacy dapp browsers...\r\n//       else if (window.web3) {\r\n//         // Use Mist/MetaMask's provider.\r\n//         const web3 = window.web3;\r\n//         console.log(\"Injected web3 detected.\");\r\n//         resolve(web3);\r\n//       }\r\n//       // Fallback to localhost; use dev console port by default...\r\n//       else {\r\n//         const provider = new Web3.providers.HttpProvider(\r\n//           \"http://127.0.0.1:7545\"\r\n//         );\r\n//         const web3 = new Web3(provider);\r\n//         console.log(\"No web3 instance injected, using Local web3.\");\r\n//         resolve(web3);\r\n//       }\r\n//     });\r\n//   });\r\n\r\n// export default new Web3(getWeb3);"]},"metadata":{},"sourceType":"module"}
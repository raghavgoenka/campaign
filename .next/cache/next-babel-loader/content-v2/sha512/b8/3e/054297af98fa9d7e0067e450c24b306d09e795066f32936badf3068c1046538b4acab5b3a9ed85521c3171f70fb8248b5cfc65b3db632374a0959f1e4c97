{"ast":null,"code":"// import Web3 from 'web3';\n// let web3;\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\n//     web3 = new Web3(window.ethereum);\n// }\n// else{\n//    const provider=new Web3.providers.HttpProvider(\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\n// );\n// console.log(\"111111111111111111111111111111111111\");\n// console.log(provider);\n//     web3 = new Web3(provider);\n//     console.log(\"Injected web3 not detected. Using http provider.\");\n// }\n// export default web3;\nimport Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  console.log(\"111111111111111111111111111111111111\"); // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    console.log(\"Checking Availabe Web3 Provider!!!!!!!!!!!!!!!!!\");\n\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      console.log(\"MetaMAsk detectes\");\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n        }\n  });\n});\n\nexport default new Web3(getWeb3);","map":{"version":3,"sources":["C:/Users/ragha/Downloads/blockchain/Campaign/ethereum/web3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","console","log","window","addEventListener","ethereum","web3","provider","providers","HttpProvider"],"mappings":"AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAiBA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MAEd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAD6B,CAE/B;;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;;AACA,QAAIC,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMC,IAAI,GAAG,IAAIV,IAAJ,CAASO,MAAM,CAACE,QAAhB,CAAb;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,KAHD,CAIA;AAJA,SAKK,IAAIC,MAAM,CAACG,IAAX,EAAiB;AACpB;AACA,cAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAL,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAED,OALI,CAML;AANK,WAOA;AACH,gBAAMK,QAAQ,GAAG,IAAIX,IAAI,CAACY,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGA,gBAAMH,IAAI,GAAG,IAAIV,IAAJ,CAASW,QAAT,CAAb;AACAN,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AAED;AACF,GAvBD;AAwBD,CA3BD,CAFF;;AAgCA,eAAe,IAAIN,IAAJ,CAASC,OAAT,CAAf","sourcesContent":["// import Web3 from 'web3';\r\n\r\n// let web3;\r\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\r\n\r\n//     web3 = new Web3(window.ethereum);\r\n    \r\n// }\r\n// else{\r\n//    const provider=new Web3.providers.HttpProvider(\r\n      \r\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n// );\r\n// console.log(\"111111111111111111111111111111111111\");\r\n// console.log(provider);\r\n   \r\n//     web3 = new Web3(provider);\r\n  \r\n//     console.log(\"Injected web3 not detected. Using http provider.\");\r\n   \r\n// }\r\n\r\n// export default web3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n\r\n  new Promise((resolve, reject) => {\r\n      console.log(\"111111111111111111111111111111111111\");\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      console.log(\"Checking Availabe Web3 Provider!!!!!!!!!!!!!!!!!\");      \r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        console.log(\"MetaMAsk detectes\");\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n      \r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:7545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        \r\n      }\r\n    });\r\n  });\r\n\r\n \r\nexport default new Web3(getWeb3);"]},"metadata":{},"sourceType":"module"}
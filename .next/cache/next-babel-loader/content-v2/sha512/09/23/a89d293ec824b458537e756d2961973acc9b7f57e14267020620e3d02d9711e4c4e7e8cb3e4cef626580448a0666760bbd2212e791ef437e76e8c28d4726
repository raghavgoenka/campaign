{"ast":null,"code":"// import Web3 from 'web3';\n// let web3;\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\n//     web3 = new Web3(window.web3.currentProvider);\n//     const net=web3.eth.net.getId();\n//     const accounts=web3.eth.getAccounts();\n//     // window.alert(\"open using metamssk\");\n// }\n// else{\n//    const provider=new Web3.providers.HttpProvider(\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\n// );\n//     web3 = new Web3(provider);\n// }\n// export default web3;\nimport Web3 from \"web3\";\nlet web3;\nwindow.addEventListener(\"load\", async () => {\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum);\n\n    try {\n      // Request account access if needed\n      await window.ethereum.enable(); // Acccounts now exposed\n\n      resolve(web3);\n    } catch (error) {\n      reject(error);\n    }\n  } // Legacy dapp browsers...\n  else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.HttpProvider(\"HTTP://127.0.0.1:7545\");\n        web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n});\nexport default web3;","map":{"version":3,"sources":["/mnt/c/Users/ragha/Downloads/blockchain/Campaign/ethereum/web3.js"],"names":["Web3","web3","window","addEventListener","ethereum","enable","resolve","error","reject","console","log","provider","providers","HttpProvider"],"mappings":"AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,IAAJ;AACIC,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,MAAID,MAAM,CAACE,QAAX,EAAqB;AAClBH,IAAAA,IAAI,GAAG,IAAID,IAAJ,CAASE,MAAM,CAACE,QAAhB,CAAP;;AACD,QAAI;AACF;AACA,YAAMF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EAAN,CAFE,CAGF;;AACAC,MAAAA,OAAO,CAACL,IAAD,CAAP;AACD,KALD,CAKE,OAAOM,KAAP,EAAc;AACdC,MAAAA,MAAM,CAACD,KAAD,CAAN;AACD;AACF,GAVD,CAWA;AAXA,OAYK,IAAIL,MAAM,CAACD,IAAX,EAAiB;AACpB;AACCA,MAAAA,IAAI,GAAGC,MAAM,CAACD,IAAd;AACDQ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAJ,MAAAA,OAAO,CAACL,IAAD,CAAP;AACD,KALI,CAML;AANK,SAOA;AACH,cAAMU,QAAQ,GAAG,IAAIX,IAAI,CAACY,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGCZ,QAAAA,IAAI,GAAG,IAAID,IAAJ,CAASW,QAAT,CAAP;AACDF,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAJ,QAAAA,OAAO,CAACL,IAAD,CAAP;AACD;AACF,CA7BD;AAgCJ,eAAeA,IAAf","sourcesContent":["// import Web3 from 'web3';\r\n\r\n// let web3;\r\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\r\n\r\n//     web3 = new Web3(window.web3.currentProvider);\r\n//     const net=web3.eth.net.getId();\r\n//     const accounts=web3.eth.getAccounts();\r\n    \r\n//     // window.alert(\"open using metamssk\");\r\n\r\n// }\r\n// else{\r\n//    const provider=new Web3.providers.HttpProvider(\r\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n// );\r\n   \r\n//     web3 = new Web3(provider);\r\n  \r\n\r\n   \r\n// }\r\n\r\n// export default web3;\r\nimport Web3 from \"web3\";\r\n\r\nlet web3\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n         web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n         web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"HTTP://127.0.0.1:7545\"\r\n        );\r\n         web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n\r\n\r\nexport default web3;"]},"metadata":{},"sourceType":"module"}
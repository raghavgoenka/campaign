{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ragha/Downloads/blockchain/Campaign/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ragha/Downloads/blockchain/Campaign/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// import Web3 from 'web3';\n// let web3;\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\n//     web3 = new Web3(window.web3.currentProvider);\n// }\n// else{\n//    const provider=new Web3.providers.HttpProvider(\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\n// );\n//     web3 = new Web3(provider);\n//     console.log(\"Injected web3 not detected. Using http provider.\");\n// }\n// export default web3;\nimport Web3 from \"web3\";\nvar web3;\nconsole.log(\"0\");\n\nvar getWeb3 = function getWeb3() {\n  return console.log(\"1\");\n};\n\nnew Promise(function (resolve, reject) {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!window.ethereum) {\n              _context.next = 13;\n              break;\n            }\n\n            web3 = new Web3(window.ethereum);\n            _context.prev = 2;\n            _context.next = 5;\n            return window.ethereum.enable();\n\n          case 5:\n            // Acccounts now exposed\n            resolve(web3);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            reject(_context.t0);\n\n          case 11:\n            _context.next = 14;\n            break;\n\n          case 13:\n            // Legacy dapp browsers...\n            if (window.web3) {\n              // Use Mist/MetaMask's provider.\n              web3 = window.web3;\n              console.log(\"Injected web3 detected.\");\n              resolve(web3);\n            } // Fallback to localhost; use dev console port by default...\n            else {\n                provider = new Web3.providers.HttpProvider('https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb');\n                web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n              }\n\n          case 14:\n            _context.next = 16;\n            return getWeb3();\n\n          case 16:\n            web3 = _context.sent;\n            console.log(web3);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  })));\n});\nexport default web3;","map":{"version":3,"sources":["C:/Users/ragha/Downloads/blockchain/Campaign/ethereum/web3.js"],"names":["Web3","web3","console","log","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","enable","provider","providers","HttpProvider"],"mappings":";;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAKA;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,IAAIC,IAAJ;AACAC,OAAO,CAACC,GAAR,CAAY,GAAZ;;AACA,IAAMC,OAAO,GAAI,SAAXA,OAAW;AAAA,SACjBF,OAAO,CAACC,GAAR,CAAY,GAAZ,CADiB;AAAA,CAAjB;;AAEE,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,wEAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAE1BD,MAAM,CAACE,QAFmB;AAAA;AAAA;AAAA;;AAG3BT,YAAAA,IAAI,GAAG,IAAID,IAAJ,CAASQ,MAAM,CAACE,QAAhB,CAAP;AAH2B;AAAA;AAAA,mBAMpBF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EANoB;;AAAA;AAO1B;AACAL,YAAAA,OAAO,CAACL,IAAD,CAAP;AAR0B;AAAA;;AAAA;AAAA;AAAA;AAU1BM,YAAAA,MAAM,aAAN;;AAV0B;AAAA;AAAA;;AAAA;AAa9B;AACK,gBAAIC,MAAM,CAACP,IAAX,EAAiB;AACpB;AACCA,cAAAA,IAAI,GAAGO,MAAM,CAACP,IAAd;AACDC,cAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAG,cAAAA,OAAO,CAACL,IAAD,CAAP;AACD,aALI,CAML;AANK,iBAOA;AACGW,gBAAAA,QADH,GACc,IAAIZ,IAAI,CAACa,SAAL,CAAeC,YAAnB,CACrB,+DADqB,CADd;AAIFb,gBAAAA,IAAI,GAAG,IAAID,IAAJ,CAASY,QAAT,CAAP;AACDV,gBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAG,gBAAAA,OAAO,CAACL,IAAD,CAAP;AACD;;AA5B6B;AAAA;AAAA,mBA6BnBG,OAAO,EA7BY;;AAAA;AA6B9BH,YAAAA,IA7B8B;AA8B9BC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AA9B8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;AAkCD,CApCD;AAsCF,eAAeA,IAAf","sourcesContent":["// import Web3 from 'web3';\r\n\r\n// let web3;\r\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\r\n\r\n//     web3 = new Web3(window.web3.currentProvider);\r\n    \r\n// }\r\n// else{\r\n//    const provider=new Web3.providers.HttpProvider(\r\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n// );\r\n   \r\n//     web3 = new Web3(provider);\r\n  \r\n//     console.log(\"Injected web3 not detected. Using http provider.\");\r\n   \r\n// }\r\n\r\n\r\n\r\n\r\n// export default web3;\r\nimport Web3 from \"web3\";\r\nlet web3;\r\nconsole.log(\"0\");\r\nconst getWeb3 =  () =>\r\nconsole.log(\"1\");\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n         web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n         web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n    'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n);\r\n         web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n      web3=await getWeb3();\r\n      console.log(web3);\r\n\r\n    });\r\n    \r\n  });\r\n\r\nexport default web3;"]},"metadata":{},"sourceType":"module"}
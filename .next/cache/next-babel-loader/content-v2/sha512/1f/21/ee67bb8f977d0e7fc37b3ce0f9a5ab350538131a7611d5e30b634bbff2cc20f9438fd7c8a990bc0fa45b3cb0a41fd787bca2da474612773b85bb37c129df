{"ast":null,"code":"import Web3 from 'web3';\nvar web3;\n\nif (true && typeof window.web3 !== 'undefined') {\n  web3 = new Web3(window.web3.currentProvider);\n  console.log(\"Web3 is defined\");\n} else {\n  var provider = new Web3.providers.HttpProvider('https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb');\n  web3 = new Web3(provider);\n  console.log(\"Injected web3 not detected. Using http provider.\");\n}\n\ncon;\nexport default web3; // import Web3 from \"web3\";\n// const getWeb3 = () =>\n//   new Promise((resolve, reject) => {\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\n//     window.addEventListener(\"load\", async () => {\n//       // Modern dapp browsers...\n//       if (window.ethereum) {\n//         const web3 = new Web3(window.ethereum);\n//         try {\n//           // Request account access if needed\n//           await window.ethereum.enable();\n//           // Acccounts now exposed\n//           resolve(web3);\n//         } catch (error) {\n//           reject(error);\n//         }\n//       }\n//       // Legacy dapp browsers...\n//       else if (window.web3) {\n//         // Use Mist/MetaMask's provider.\n//         const web3 = window.web3;\n//         console.log(\"Injected web3 detected.\");\n//         resolve(web3);\n//       }\n//       // Fallback to localhost; use dev console port by default...\n//       else {\n//         const provider = new Web3.providers.HttpProvider(\n//           \"http://127.0.0.1:7545\"\n//         );\n//         const web3 = new Web3(provider);\n//         console.log(\"No web3 instance injected, using Local web3.\");\n//         resolve(web3);\n//       }\n//     });\n//   });\n// export default new Web3(getWeb3);","map":{"version":3,"sources":["C:/Users/ragha/Downloads/blockchain/Campaign/ethereum/web3.js"],"names":["Web3","web3","window","currentProvider","console","log","provider","providers","HttpProvider","con"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,IAAJ;;AAEA,IAAG,QAAiC,OAAOC,MAAM,CAACD,IAAd,KAAsB,WAA1D,EAAsE;AAElEA,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASE,MAAM,CAACD,IAAP,CAAYE,eAArB,CAAP;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEH,CALD,MAMI;AACD,MAAMC,QAAQ,GAAC,IAAIN,IAAI,CAACO,SAAL,CAAeC,YAAnB,CAEd,+DAFc,CAAf;AAMCP,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASM,QAAT,CAAP;AAEAF,EAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;AAEH;;AACDI,GAAG;AACH,eAAeR,IAAf,C,CAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import Web3 from 'web3';\r\n\r\nlet web3;\r\n\r\nif(typeof window !== 'undefined' && typeof window.web3 !=='undefined'){\r\n        \r\n    web3 = new Web3(window.web3.currentProvider);\r\n    console.log(\"Web3 is defined\");\r\n   \r\n}\r\nelse{\r\n   const provider=new Web3.providers.HttpProvider(\r\n      \r\n    'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n);\r\n\r\n   \r\n    web3 = new Web3(provider);\r\n  \r\n    console.log(\"Injected web3 not detected. Using http provider.\");\r\n   \r\n}\r\ncon\r\nexport default web3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import Web3 from \"web3\";\r\n\r\n// const getWeb3 = () =>\r\n//   new Promise((resolve, reject) => {\r\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n//     window.addEventListener(\"load\", async () => {\r\n//       // Modern dapp browsers...\r\n//       if (window.ethereum) {\r\n//         const web3 = new Web3(window.ethereum);\r\n//         try {\r\n//           // Request account access if needed\r\n//           await window.ethereum.enable();\r\n//           // Acccounts now exposed\r\n//           resolve(web3);\r\n//         } catch (error) {\r\n//           reject(error);\r\n//         }\r\n//       }\r\n//       // Legacy dapp browsers...\r\n//       else if (window.web3) {\r\n//         // Use Mist/MetaMask's provider.\r\n//         const web3 = window.web3;\r\n//         console.log(\"Injected web3 detected.\");\r\n//         resolve(web3);\r\n//       }\r\n//       // Fallback to localhost; use dev console port by default...\r\n//       else {\r\n//         const provider = new Web3.providers.HttpProvider(\r\n//           \"http://127.0.0.1:7545\"\r\n//         );\r\n//         const web3 = new Web3(provider);\r\n//         console.log(\"No web3 instance injected, using Local web3.\");\r\n//         resolve(web3);\r\n//       }\r\n//     });\r\n//   });\r\n\r\n// export default new Web3(getWeb3);"]},"metadata":{},"sourceType":"module"}
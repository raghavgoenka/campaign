{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ragha/Downloads/blockchain/Campaign/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/ragha/Downloads/blockchain/Campaign/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// import Web3 from 'web3';\n// let web3;\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\n//     web3 = new Web3(window.ethereum);\n// }\n// else{\n//    const provider=new Web3.providers.HttpProvider(\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\n// );\n// console.log(\"111111111111111111111111111111111111\");\n// console.log(provider);\n//     web3 = new Web3(provider);\n//     console.log(\"Injected web3 not detected. Using http provider.\");\n// }\n// export default web3;\nimport Web3 from \"web3\";\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var web3, _web, provider, _web2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Modern dapp browsers...\n              console.log(\"Checking Availabe Web3 Provider!!!!!!!!!!!!!!!!!\");\n\n              if (window.ethereum) {\n                web3 = new Web3(window.ethereum);\n                console.log(\"MetaMAsk detectes\");\n              } // Legacy dapp browsers...\n              else if (window.web3) {\n                  // Use Mist/MetaMask's provider.\n                  _web = window.web3;\n                  console.log(\"Injected web3 detected.\");\n                } // Fallback to localhost; use dev console port by default...\n                else {\n                    provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\n                    _web2 = new Web3(provider);\n                    console.log(\"No web3 instance injected, using Local web3.\");\n                  }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  });\n};\n\nexport default new Web3(getWeb3);","map":{"version":3,"sources":["C:/Users/ragha/Downloads/blockchain/Campaign/ethereum/web3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","console","log","ethereum","web3","provider","providers","HttpProvider"],"mappings":";;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAiBA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SAEd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,wEAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC9B;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ;;AACA,kBAAIH,MAAM,CAACI,QAAX,EAAqB;AACbC,gBAAAA,IADa,GACN,IAAIV,IAAJ,CAASK,MAAM,CAACI,QAAhB,CADM;AAEnBF,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,eAHD,CAIA;AAJA,mBAKK,IAAIH,MAAM,CAACK,IAAX,EAAiB;AACpB;AACMA,kBAAAA,IAFc,GAEPL,MAAM,CAACK,IAFA;AAGpBH,kBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAED,iBALI,CAML;AANK,qBAOA;AACGG,oBAAAA,QADH,GACc,IAAIX,IAAI,CAACY,SAAL,CAAeC,YAAnB,CACf,uBADe,CADd;AAIGH,oBAAAA,KAJH,GAIU,IAAIV,IAAJ,CAASW,QAAT,CAJV;AAKHJ,oBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AAED;;AAtB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AAwBD,GA1BD,CAFc;AAAA,CAAhB;;AA8BA,eAAe,IAAIR,IAAJ,CAASC,OAAT,CAAf","sourcesContent":["// import Web3 from 'web3';\r\n\r\n// let web3;\r\n// if(typeof window !== 'undefined' && typeof window.web3 !==undefined){\r\n\r\n//     web3 = new Web3(window.ethereum);\r\n    \r\n// }\r\n// else{\r\n//    const provider=new Web3.providers.HttpProvider(\r\n      \r\n//     'https://rinkeby.infura.io/v3/efac3104b14741c8a58856af59c7c7bb'\r\n// );\r\n// console.log(\"111111111111111111111111111111111111\");\r\n// console.log(provider);\r\n   \r\n//     web3 = new Web3(provider);\r\n  \r\n//     console.log(\"Injected web3 not detected. Using http provider.\");\r\n   \r\n// }\r\n\r\n// export default web3;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      console.log(\"Checking Availabe Web3 Provider!!!!!!!!!!!!!!!!!\");      \r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        console.log(\"MetaMAsk detectes\");\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n      \r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:7545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        \r\n      }\r\n    });\r\n  });\r\n\r\nexport default new Web3(getWeb3);"]},"metadata":{},"sourceType":"module"}